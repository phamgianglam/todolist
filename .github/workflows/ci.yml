name: CI Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]


jobs:
  verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run spotless check
        run: ./gradlew spotlessCheck
  test:
    runs-on: ubuntu-latest
    needs: verify
    env:
      SPRING_PROFILES_ACTIVE: test
      DB_USERNAME: test
      DB_PASSWORD: test
      DB_URL: jdbc:postgresql://localhost:5432/test
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run unit tests and generate coverage
        run: ./gradlew test jacocoTestReport

      - name: Install xmllint (libxml2-utils)
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Fail if coverage < 30%
        run: |
          COVERED=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@covered)" build/reports/jacoco/test/jacocoTestReport.xml)
          MISSED=$(xmllint --xpath "string(//report/counter[@type='INSTRUCTION']/@missed)" build/reports/jacoco/test/jacocoTestReport.xml)
          TOTAL=$((COVERED + MISSED))
          PERCENT=$((COVERED * 100 / TOTAL))
          echo "Instruction coverage: $PERCENT%"
          if [ "$PERCENT" -lt 30 ]; then
            echo "❌ Coverage below 30%."
            exit 1
          else
            echo "✅ Coverage is good."
          fi

      - name: Compile classes (for SonarCloud)
        run: ./gradlew classes

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=phamgianglam_todolist
            -Dsonar.organization=phamgianglam
            -Dsonar.java.binaries=build/classes
            -Dsonar.exclusions=**/src/test/**,**/test/**
            -Dsonar.cpd.exclusions=**/src/test/**,**/test/*
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: build docker image
        run: docker build -t task-management-app:latest .

      - name: save docker image
        run: docker save task-management-app:latest > task-management-app.tar

      - name: Output artifact
        uses: actions/upload-artifact@v4
        with:
          name: task-management-app
          path: task-management-app.tar

